{"version":3,"sources":["TimeMeter.js"],"names":[],"mappings":";;;;;;;;AAIA,IAAI,SAAS,GAAG,CAAC,YAAM;AACnB,QAAI,MAAM,GAAG,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,IAAI,GAAG,KAAK;QACnD,WAAW;QAAE,EAAE,CAAC;AACpB,QAAI,MAAM,EAAE;AACR,UAAE,GAAG,YAAY;AACb,mBAAO,OAAO,CAAC,MAAM,EAAE,CAAC;SAC3B,CAAA;KACJ,MAAM;AACH,mBAAW,GAAG,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,WAAW,GAAG,IAAI,GAAG,KAAK,CAAC;AAC5D,YAAI,WAAW,EAAE;AACb,cAAE,GAAG,YAAY;AACb,uBAAO,MAAM,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC;aACnC,CAAA;SACJ,MAAM;AACH,cAAE,GAAG,YAAY;AACb,uBAAO,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;aAC/B,CAAA;SACJ;KACJ;AACD,WAAO,EAAE,CAAC;CACb,CAAA,EAAG,CAAC;;IAEgB,SAAS;aAAT,SAAS;;yBAAT,SAAS;AACnB,kBAAU;mBAAA,sBAAG;AAChB,uBAAO,SAAS,EAAE,CAAC;aACtB;;;;;AACM,sBAAc;mBAAA,wBAAC,KAAK,EAAE,GAAG,EAAE;AAC9B,oBAAI,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;oBACjC,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC;oBAC7B,QAAQ;oBAAE,YAAY;oBAAE,EAAE,CAAC;;AAE/B,oBAAI,UAAU,IAAI,QAAQ,EAAE;AACxB,4BAAQ,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAC7B,gCAAY,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;;AAEjC,sBAAE,GAAG,QAAQ,GAAG,IAAI,GAAG,YAAY,GAAG,OAAO,CAAC;iBACjD,MAAM;AACH,sBAAE,GAAG,GAAG,GAAG,KAAK,CAAC;iBACpB;AACD,uBAAO,EAAE,CAAC;aACb;;;;;AACM,cAAM;mBAAA,gBAAC,CAAC,EAAE;AACb,oBAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;AACzC,uBAAO,MAAM,GAAG,KAAK,CAAC;aACzB;;;;;;;WAtBgB,SAAS;;;iBAAT,SAAS","file":"TimeMeter.js","sourcesContent":["/**\r\n * Created by Pencroff on 28/01/2015.\r\n */\r\n\r\nvar measureFn = (() => {\r\n    var hrTime = !!process && process.hrtime ? true : false,\r\n        performance, fn;\r\n    if (hrTime) {\r\n        fn = function () {\r\n            return process.hrtime();\r\n        }\r\n    } else {\r\n        performance = !!window && window.performance ? true : false;\r\n        if (performance) {\r\n            fn = function () {\r\n                return window.performance.now();\r\n            }\r\n        } else {\r\n            fn = function () {\r\n                return new Date().getTime();\r\n            }\r\n        }\r\n    }\r\n    return fn;\r\n})();\r\n\r\nexport default class TimeMeter {\r\n    static getMeasure() {\r\n        return measureFn();\r\n    }\r\n    static calculateDelta(start, end) {\r\n        var isStartArr = Array.isArray(start),\r\n            isEndArr = Array.isArray(end),\r\n            secDelta, nanoSecDelta, ms;\r\n\r\n        if (isStartArr && isEndArr) {\r\n            secDelta = end[0] - start[0];\r\n            nanoSecDelta = end[1] - start[1];\r\n\r\n            ms = secDelta * 1000 + nanoSecDelta / 1000000;\r\n        } else {\r\n            ms = end - start;\r\n        }\r\n        return ms;\r\n    }\r\n    static format(v) {\r\n        var result = Math.round(v * 1000) / 1000;\r\n        return result + ' ms';\r\n    }\r\n}"],"sourceRoot":"/source/"}